
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNleftLORleftLANDrightLNOTnonassocLTGTGELEEQNEleftBORleftBANDleftPLUSMINUSleftTIMESDIVIDEMODULOIDIVIDEleftINCREMENTDECREMENTASSIGN BAND BOR COLON COMMA COMMENT CONST_BOOLEAN CONST_FLOAT CONST_INTEGER CONST_STRING DATATYPE DECL_ARRAY DECL_BOOLEAN DECL_FLOAT DECL_INTEGER DECL_STRING DECREMENT DIVIDE DO DOT ELIF ELSE EQ FOR FUNCTION GE GOTO GT ID IDIVIDE IF INCREMENT LAND LBRACE LBRACKET LE LNOT LOR LPAREN LT MINUS MODULO NE NEWLINE NULL PLUS RBRACE RBRACKET RETURN RPAREN SEMI SKIP STRUCT TIMES WHILEexpression : expression PLUS expression\n            | expression MINUS expression\n            | expression TIMES expression\n            | expression DIVIDE expression\n            | expression MODULO expression\n            | expression IDIVIDE expression\n            | expression BOR expression\n            | expression BAND expression\n            | expression LT expression\n            | expression GT expression\n            | expression GE expression\n            | expression LE expression\n            | expression EQ expression\n            | expression NE expression\n            | LPAREN expression RPAREN\n            | CONST_INTEGER\n    '
    
_lr_action_items = {'LPAREN':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'CONST_INTEGER':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'$end':([1,3,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[0,-16,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,]),'PLUS':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[4,-16,4,-1,-2,-3,-4,-5,-6,4,4,4,4,4,4,4,4,-15,]),'MINUS':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[5,-16,5,-1,-2,-3,-4,-5,-6,5,5,5,5,5,5,5,5,-15,]),'TIMES':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[6,-16,6,6,6,-3,-4,-5,-6,6,6,6,6,6,6,6,6,-15,]),'DIVIDE':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[7,-16,7,7,7,-3,-4,-5,-6,7,7,7,7,7,7,7,7,-15,]),'MODULO':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[8,-16,8,8,8,-3,-4,-5,-6,8,8,8,8,8,8,8,8,-15,]),'IDIVIDE':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[9,-16,9,9,9,-3,-4,-5,-6,9,9,9,9,9,9,9,9,-15,]),'BOR':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[10,-16,10,-1,-2,-3,-4,-5,-6,-7,-8,10,10,10,10,10,10,-15,]),'BAND':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[11,-16,11,-1,-2,-3,-4,-5,-6,11,-8,11,11,11,11,11,11,-15,]),'LT':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[12,-16,12,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'GT':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[13,-16,13,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'GE':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[14,-16,14,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'LE':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[15,-16,15,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'EQ':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[16,-16,16,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'NE':([1,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[17,-16,17,-1,-2,-3,-4,-5,-6,-7,-8,None,None,None,None,None,None,-15,]),'RPAREN':([3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,],[-16,33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[1,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operators','yacc.py',18),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operators','yacc.py',19),
  ('expression -> expression TIMES expression','expression',3,'p_binary_operators','yacc.py',20),
  ('expression -> expression DIVIDE expression','expression',3,'p_binary_operators','yacc.py',21),
  ('expression -> expression MODULO expression','expression',3,'p_binary_operators','yacc.py',22),
  ('expression -> expression IDIVIDE expression','expression',3,'p_binary_operators','yacc.py',23),
  ('expression -> expression BOR expression','expression',3,'p_binary_operators','yacc.py',24),
  ('expression -> expression BAND expression','expression',3,'p_binary_operators','yacc.py',25),
  ('expression -> expression LT expression','expression',3,'p_binary_operators','yacc.py',26),
  ('expression -> expression GT expression','expression',3,'p_binary_operators','yacc.py',27),
  ('expression -> expression GE expression','expression',3,'p_binary_operators','yacc.py',28),
  ('expression -> expression LE expression','expression',3,'p_binary_operators','yacc.py',29),
  ('expression -> expression EQ expression','expression',3,'p_binary_operators','yacc.py',30),
  ('expression -> expression NE expression','expression',3,'p_binary_operators','yacc.py',31),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_binary_operators','yacc.py',32),
  ('expression -> CONST_INTEGER','expression',1,'p_binary_operators','yacc.py',33),
]
